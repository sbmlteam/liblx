Quickstart
==========

.. _building_library:

Building the library
--------------------
There are different components we can build:

  - the C++ ``liblx`` library
  - the SWIG language bindings (e.g. to enable access to ``liblx`` via a Python interface)
  - the documentation

It is best to do an "out-of-source" build. This means to build the components in a
location which is not within the ``cmake`` hierarchy being used. A quick way of doing
this is to create a new ``build/`` directory, ensuring it is not within the ``liblx``
github repo which you have cloned.

Also, note that, at the current time, you can choose which of three different XML libraries
you wish to use to build ``liblx``.

.. _building_mac:

Instructions for building on a Mac
----------------------------------

Create a virtual environment first.

e.g. on a Mac:

.. code-block:: bash

    ~ > python3 -m venv venv
    ~ > . ./venv/bin/activate

(Do this in a directory outside the repo. Use the command ``deactivate`` if you need to
exit the virtual environment.)

In order to be able to run the test code, install ``check`` (unit testing library for C) -
e.g. ``brew install check``  -> ``/usr/local/Cellar/check/0.15.2/`` in my case.

Now clone the ``liblx`` repo in a suitable directory, if not done already:

``git clone https://github.com/sbmlteam/liblx.git``


In a location outside of the cloned repo, create a directory in which to do the build, e.g.

.. code-block:: bash

    mkdir build   -  the results of the build will be in here.
    cd build

Execute ``cmake``, e.g.

.. code-block:: bash

 cmake -DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DWITH_CHECK=TRUE -G "Unix Makefiles" /path/to/liblx/cloned/repo/

Note that the directory at the end of the ``cmake`` command above is the top-level directory of the cloned repo
(i.e. it contains the top-level ``CMakeLists.txt`` file).

Now execute command ``make``, or try ``cmake --build .``

On Mac, this builds ``build/src/liblx-static.a`` and ``build/src/liblx.dylib``

Invoke test script in ``build/`` subdir; it is ``src/liblx/xml/test/Debug/test_sbml_xml``
or similar. It's easier to just run the command ``ctest -V`` instead, as it does (almost) the same.

Each time you build, it is best to delete any results of the previous build
``git clean`` can remove untracked files e.g. those generated by ``CMake`` - need to clean these out before
each ``CMake`` build
e.g.

.. code-block:: bash

     git clean -d -x -f -n  # check what you will delete
     git clean -d -x -f
     mkdir build
     cd build
     cmake -DWITH_PYTHON=TRUE -DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DWITH_CHECK=TRUE -G "Unix Makefiles" /Users/matthewgillman/repos/libLX/liblx/
     make

or use the nuclear option: ``rm -rf build``

To get the SWIG/Python bindings built, it appears we must download the Xerces distribution ???????????
Because various Xerces files in ``src/liblx/xml`` ``#include`` files from there.
LibXML appears to be fully present already.
`Xerces instructions <http://www.yolinux.com/TUTORIALS/XML-Xerces-C.html>`_.

.. code-block:: bash

    > cd ~
    > mkdir xerces && cd xerces
    http://xml.apache.org/xerces-c/download.cgi
    e.g.:
    > wget https://www.mirrorservice.org/sites/ftp.apache.org//xerces/c/3/sources/xerces-c-3.2.3.tar.gz
    > shasum *.gz   # check the output is the same as on the xerces website download page
    > tar -xzf xerces-c-3.2.3.tar.gz
    > cd xerces-c-3.2.3
    > ./configure --prefix=/opt
    > make
    > sudo make install

The include files are now in ``/opt/include/xercesc``, new applications in ``/opt/bin``,
and libraries in ``/opt/lib``.
This will install development files such as include header files and libraries in ``/opt`` so compiler
flags and linker flags are required:

    Compiler flags: ``-I/opt/include``         (``CXXFLAGS``)
    Linker flags: ``-L/opt/lib -lxerces-c``    (``LDFLAGS``)

Try: cmake command as above but with ``-I/opt/include -L/opt/lib -lxerces-c``

You should be able to do this (not all of the ``cmake`` command shown):

.. code-block:: bash

     cmake ... -DWITH_XERCES=TRUE  (or -DWITH_EXPAT or -DWITH_LIBXML)

Actually, ``WITH_LIBXML`` is ``ON`` by default, so would need:

.. code-block:: bash

     cmake ... -DWITH_XERCES=TRUE -DWITH_LIBXML=FALSE (or ON/OFF)

to build ``liblx`` using the Xerces library, for example.

*** # I think this next statement is wrong (TBC): ***
NB at the moment Expat and Xerces builds are failing as they still have some SBML stuff
e.g. ``LIBSBML_CPP_NAMESPACE_END``


.. _building_windows:

How to build on Windows
-----------------------
You need to install:

 -  `Visual Studio <https://visualstudio.microsoft.com/vs/>`_.
    In my case this was Microsoft Visual Studio Community 2019, Version 16.11.1. (I included the Windows 10 SDK)


 -  `CMake <https://cmake.org/download/>`_. I  chose the Windows installer and checked the box to update PATH.
    Apparently, Visual Studio already includes ``CMake``, so you may not have to do this.

You then need to download the `SBML Windows dependencies <https://sourceforge.net/projects/sbml/files/libsbml/win-dependencies/>`_.
This contains a number of libraries used by SBML, and by ``liblx`` too.
Right now there is no "version 16", so I downloaded the highest available one (15), using the debug
version as I am working on the core ``liblx``. Make sure you check the checksums.

The version I downloaded, when unzipped, created a directory which had a space in the name, and a quote mark
at each end. For simplicity, I renamed it; e.g., using ``git bash`` for Windows:

.. code-block:: bash

    mv 'libSBML Dependencies-1.0.0-b1-win64' libSBML-Dependencies-1.0.0-b1-win64

or, in a Windows cmd shell window:

.. code-block:: bash

    rename "libSBML Dependencies-1.0.0-b1-win64" libSBML-Dependencies-1.0.0-b1-win64

**It is best to use a virtual environment, as per the Mac instructions.**

.. code-block:: bash

    C:\Users\mattg\envts> python -m venv venv
    C:\Users\mattg\envts> .\venv\Scripts\activate   -> you should see command prompt text change
    (venv) C:\Users\mattg\envts>

(Use the command ``deactivate`` if you need to exit the virtual environment.)

Do this outside the repo you have cloned, otherwise lots of unnecessary files
will be generated in the documentation step. e.g. I have a directory
``C:\Users\mattg\envts`` set up to store virtual environments such as this.

Once you have created the virtual environment, in future sessions you just need to
run the ``activate`` step above.

Then create a new ``build/`` directory; do this OUTSIDE the ``liblx`` repo cloned from Github.
Then, from within that new ``build`` directory, in a Visual Studio Command Prompt:

.. code-block:: bash

     cmake -DLIBLX_DEPENDENCY_DIR=C:\Users\mattg\repos\work\CompBioLibs\debug\debug_x64_dynamic\libSBML-Dependencies-1.0.0-b1-win64 -DCMAKE_BUILD_TYPE=Debug -DWITH_CHECK=TRUE -DCMAKE_BUILD_TYPE=Release -DWITH_STATIC_RUNTIME=OFF C:\Users\mattg\repos\work\CompBioLibs\liblx
     cmake --build .

NB this is wrong as it has two different DCMAKE_BUILD_TYPE values

where the commands were invoked from a new ``build/`` directory ``c:\Users\mattg\build``
and the ``LIBLX_DEPENDENCY_DIR`` is the absolute path to the unzipped (and renamed) SBML dependencies folder.

Or, if you don't like the command line, you can refer to the
`detailed instructions <http://sbml.org/Software/libSBML/5.18.0/docs/cpp-api/libsbml-installation.html#detailed-windows>`_
for building ``libSBML`` on Windows (which we can adapt for building ``liblx``). Use the CMake GUI for the first
step. Then, the second command above (the build (i.e. compilation) step) can be done from within the Visual Studio
GUI. The easiest way is to locate the "solution" file, ``liblx.sln``, which should have been generated in
the ``build`` directory; navigate to it using Windows Explorer, then double-click on it to open this solution
in Visual Studio (but see below). Then, right-click on the desired target (e.g. ``ALL_BUILD``) and select the build option.

Result: in ``build\src\Debug``, we now have ``liblx-static.lib`` and ``liblx.dll``.

NB Seems to generate both static and dynamic libs regardless.

All being well, you should find the library files `liblx.dll` and `liblx-static.lib` have been generated;
in my case, in ``build/src/Debug/``. **NB not sure why dll built as well as static lib.**
  
.. code-block:: bash

    $ ls -lh build/src/Debug
    total 32M
    -rwxr-xr-x 1 mattg 197611 2.7M Aug 26 11:24 liblx.dll*
    -rw-r--r-- 1 mattg 197611 168K Aug 26 11:24 liblx.exp
    -rw-r--r-- 1 mattg 197611 274K Aug 26 11:24 liblx.lib
    -rw-r--r-- 1 mattg 197611  13M Aug 26 11:24 liblx.pdb
    -rw-r--r-- 1 mattg 197611  17M Aug 26 11:24 liblx-static.lib


Run the test program (``.\src\liblx\xml\test\Debug\test_sbml_xml.exe`` or similar) to check all is well:

.. code-block:: bash

    ctest -V


.. _building_documentation:

Building the documentation
--------------------------
The documentation is automatically built on readthedocs with every commit. However, you
can still generate the documentation locally along your normal build (see `Building the library`_). For that you
will need the following requirements installed:

??? brew install sphinx-doc  # to /usr/local/opt/sphinx-doc/bin
??? or pip install -U sphinx   -> sphinx-build --version = "sphinx-build 4.0.2"
brew install doxygen   # e.g. to /usr/local/bin/doxygen
pip install breathe # see
pip show breathe -> ~/repos/Deviser/deviser/generator/pytest_files/cbl-env/lib/python3.6/site-packages/breathe

If you need to have ``sphinx-doc`` first in your ``PATH``, run:

.. code-block:: bash

     echo 'export PATH="/usr/local/opt/sphinx-doc/bin:$PATH"' >> ~/.bash_profile

can use copasi cmake module FindSphinx.cmake

cmake -DWITH_DOXYGEN=ON -DDOXYGEN_EXECUTABLE=/usr/local/bin/doxygen ..

-- Found Doxygen: /usr/local/bin/doxygen (found version "1.9.1") found components: doxygen missing components: dot
The dot is from graphviz, which can be used by Doxygen to draw inheritance diagrams etc


Next you need the following python packages ``breathe`` and ``sphinx_rtd_theme``. So we start
by creating a virtual environment, activating it and installing the packages into it. 
e.g. on a Mac:

.. code-block:: bash

    ~ > python3 -m venv venv 
    ~ > . ./venv/bin/activate
    (venv) ~ > pip install sphinx_rtd_theme breathe
    (venv) ~ > brew install doxygen

NB the above steps should not be done in the directory hierarchy of the git repo.

On Windows, VS cmd prompt:

.. code-block:: bash

    python -m venv venv
    .\venv\Scripts\activate   -> you should see command prompt text change
    >pip install sphinx_rtd_theme breathe

Install Doxygen binaries - see https://www.doxygen.nl/manual/install.html#install_bin_windows
and GraphViz - see https://graphviz.org/download/

Update ``PATH`` e.g. (Windows):

.. code-block:: bash

     set PATH=%PATH%;C:\Program Files\doxygen\bin  (or setx to do it permanently)
     set PATH=%PATH%;C:\Program Files\GraphViz\bin

NB do you need to update ``$PATH`` on *nix/Mac?

From a website with instructions
(https://devblogs.microsoft.com/cppblog/clear-functional-c-documentation-with-sphinx-breathe-doxygen-cmake/)
: "Breathe is the bridge between Doxygen and Sphinx; taking the output from the former and making it available
through some special directives in the latter."

The command ``pip show breathe`` will show whereabouts on your system ``breathe`` has been installed.
It may be necessary (but I don't think so, and not on Windows) to be added to your ``PYTHONPATH``
before building the documentation (or, if ``PYTHONPATH`` is not currently set, to set it to this value).
For example, if the ``breathe`` directory is installed as ``/Users/smith/venv/lib/python3.6/site-packages/breathe``,
add ``/Users/smith/venv/lib/python3.6/site-packages/`` to your ``PYTHONPATH``. For example (from within
your virtual environment):

.. code-block:: bash

    > export PYTHONPATH="/Users/smith/venv/lib/python3.6/site-packages/"
    > echo $PYTHONPATH
    /Users/smith/venv/lib/python3.6/site-packages/

or, on Windows:

.. code-block:: bash

    > set PYTHONPATH=C:\Users\mattg\envts\venv\lib\site-packages

It's possible ``PYTHONPATH`` isn't needed at this stage, but it definitely is when you get to
the SWIG binding compilation step (for the Python binding), below.

(We created ``venv`` inside directory ``C:\Users\mattg\envts`` before this)

Since the documentation is not generated by default, you have to reconfigure your ``cmake``
project for the ``libLX`` API next. So change into your ``build/`` folder from before, and
reconfigure with the option ``-DWITH_DOXYGEN=ON`` added to the ``cmake`` command. You will probably
want to empty the ``build/`` directory first.

Doxygen should be picked up, if you updated the ``PATH`` environment variable above; if not,
you can specify it as an extra item in the ``cmake`` command above.
e.g. add the following option (Windows example)

.. code-block:: bash

    -DDOXYGEN_EXECUTABLE="C:\Program Files\doxygen\bin\doxygen.exe"  # or wherever yours is.

You need to set the ``CODE_SRC_DIR`` environment variable; this specifies the location of the top
of the hierarchy of ``liblx ``source files in the repo. Example (Windows):

.. code-block:: bash

     > set CODE_SRC_DIR=C:\Users\mattg\repos\work\CompBioLibs\liblx\src

This environment variable is used in the ``INPUT`` line of ``Doxyfile.in``.
This will allow the "API" section of the documentation to be populated.

.. code-block:: bash

    (venv) ~ > cd liblx/build
    (venv) build > cmake -DWITH_DOXYGEN=ON ..

    ...
    ...
    -- Configuring done
    -- Generating done
    -- Build files have been written to: /some/path/or/other/build
    (venv) build >

Errors would have shown if Doxygen or Sphinx could not be found in the process. Now you
are ready to build the documentation with (on a Mac):

.. code-block:: bash

    (venv) build > make Sphinx
    [ 50%] Generating documentation with Sphinx
    Running Sphinx v3.5.4

    ...
    ...

    build succeeded.

    The HTML pages are in sphinx.
    [100%] Built target Sphinx

    (venv) build >

or, on Windows, use ``cmake --build .``

And at this point you have the HTML pages generated in ``./docs/sphinx/`` with the 
main document being ``./docs/sphinx/index.html``. This page will be ``./docs/sphinx/quickstart/get-started.html``.

Windows example (builds docs and check code):

.. code-block:: bash

    cmake -DLIBLX_DEPENDENCY_DIR=C:\Users\mattg\repos\work\CompBioLibs\debug\debug_x64_dynamic\libSBML-Dependencies-1.0.0-b1-win64 -DCMAKE_BUILD_TYPE=Debug -DWITH_CHECK=TRUE -DCMAKE_BUILD_TYPE=Release -DWITH_STATIC_RUNTIME=OFF -DWITH_DOXYGEN=TRUE  C:\Users\mattg\repos\work\CompBioLibs\liblx
    cmake --build .
    ctest -V

NB this example is wrong as it has two -DCMAKE_BUILD_TYPE's

Running the tests
-----------------
We use the testing framework catch2 <https://github.com/catchorg/Catch2> and 
integrated it with the cmake build, so after building the library you can run 
the tests using ``ctest``:


    (venv) build > ctest -V     (or -v if you want less output)


.. code-block:: bash

    (venv) build > ctest -C Debug -V


.. _how_to_use_SWIG_Python_binding:

Example of how to use the SWIG/Python binding
---------------------------------------------
If you want to build the SWIG language bindings, install swig e.g. ``brew install swig`` on a Mac.

http://www.swig.org/download.html
Windows: _____________________ "Windows users should download swigwin-4.0.2 which includes a prebuilt executable."

set PYTHON_INCLUDE=C:\ProgramData\Anaconda3\include
set PYTHON_LIB=C:\ProgramData\Anaconda3\libs\python38.lib
-DSWIG_EXECUTABLE=C:\Users\mattg\swigwin-4.0.2\swig.exe
produces src/bindings/python/liblx.py

linker error:
LINK : fatal error LNK1104: cannot open file 'python38_d.lib' [C:\Users\mattg\build\src\bindings\python\binding_python_
lib.vcxproj]
Maybe because I specified a debug version of the dependencies???
see:
https://stackoverflow.com/questions/59126760/building-a-python-c-extension-on-windows-with-a-debug-python-installation


https://stackoverflow.com/questions/17028576/using-python-3-3-in-c-python33-d-lib-not-found/45407558
It looks like we need to download a debug version of the python library. Anaconda doesn;t appear to supply this.
Downloading Windows installer of Python 3.9.7 https://www.python.org/downloads/release/python-397/
Or, one can use #ifdef statements.
The installer updated the PATH (selected option to disable max PATH character limit) and appears before the
Anaconda version in the PATH.

set PYTHON_INCLUDE="C:\Program Files\Python39\include"   # location of Python.h
set PYTHON_LIB="C:\Program Files\Python39\libs\python39_d.lib"  # debug library
-DPYTHON_EXECUTABLE="C:\Program Files\Python39\python.exe"
rm -rf ~/repos/work/CompBioLibs/liblx/out # delete vs cmake cache Visual Studio: Project-> cmake cache->delete cache

LINK : warning LNK4098: defaultlib 'MSVCRT' conflicts with use of other libs; use /NODEFAULTLIB:library [C:\Users\mattg
\build\src\liblx\xml\test\test_sbml_xml.vcxproj]

https://stackoverflow.com/questions/3007312/resolving-lnk4098-defaultlib-msvcrt-conflicts-with 



If you do a build with the extra switch ``-DWITH_PYTHON=TRUE``, you should find Python bindings generated
in the build directory, in ``src/bindings/python``. Frank says: "you should find the ``libsbml.py``
(or ``libsbml2.py / libsbml3.py`` since we still support both versions). along with a native library
``libsbml.pyd|so|dylib``. At that point you can change into the directory, export
the ``PYTHONPATH`` variable to the current path, and you can import ``libsbml`` with the configured python interpreter.
you can run ``ctest`` to check all tests pass."

http://www.swig.org/Doc4.0/Python.html#Python_nn12

NB TBC: Python bindings are ``liblx.py``, rather than ``libsbml.py``??


Still in the ``/build`` directory, set the ``PYTHONPATH`` environment variable. e.g. on Mac:

.. code-block:: bash

     export PYTHONPATH=.:src/bindings/python

or, on Windows:

.. code-block:: bash

     set PYTHONPATH=.;src/bindings/python

** NB do we need the other bit of PYTHONPATH, set in section above? **

Now we can fire up a Python interpreter and use ``liblx``:

.. code-block:: bash

    python
    >>> from liblx import *
    >>> test_str = "<annotation>\n" + "  <test xmlns=\"http://test.org/\" id=\"test1\">test2</test>\n" + "</annotation>"
    >>> y = XMLNode(test_str)
    >>> print(y.toString())
    <annotation>
      <test xmlns="http://test.org/" id="test1">test2</test>
    </annotation>
    >>> z = y.clone()
    >>> print(z)
    <liblx.XMLNode; proxy of <Swig Object of type 'XMLNode_t *' at 0x7fe15437d870> >
    >>> print(z.toString())
    <annotation>
      <test xmlns="http://test.org/" id="test1">test2</test>
    </annotation>
    >>> y == z
    False
    >>> y is z
    False
    >>> y.toString() == z.toString()
    True
    >>> y.equals(z)
    True
    >>> z.equals(y)
    True
    >>> print(y.toXMLString())
    &lt;annotation&gt;
      &lt;test xmlns=&quot;http://test.org/&quot; id=&quot;test1&quot;&gt;test2&lt;/test&gt;
    &lt;/annotation&gt;



with anaconda:
INCLUDE=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\ATLMFC\include;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include;C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared;C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um;C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\winrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\cppwinrt
LIB=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\ATLMFC\lib\x86;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\lib\x86;C:\Program Files (x86)\Windows Kits\10\lib\10.0.19041.0\ucrt\x86;C:\Program Files (x86)\Windows Kits\10\lib\10.0.19041.0\um\x86
LIBPATH=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\ATLMFC\lib\x86;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\lib\x86;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\lib\x86\store\references;C:\Program Files (x86)\Windows Kits\10\UnionMetadata\10.0.19041.0;C:\Program Files (x86)\Windows Kits\10\References\10.0.19041.0;C:\Windows\Microsoft.NET\Framework\v4.0.30319
Path=C:\Users\mattg\envts\venv\Scripts;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\\Extensions\Microsoft\IntelliCode\CLI;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\HostX86\x86;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\VC\VCPackages;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\TestWindow;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\TeamFoundation\Team Explorer;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\bin\Roslyn;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Team Tools\Performance Tools;C:\Program Files (x86)\Microsoft Visual Studio\Shared\Common\VSPerfCollectionTools\vs2019\;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\devinit;C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x86;C:\Program Files (x86)\Windows Kits\10\bin\x86;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\\MSBuild\Current\Bin;C:\Windows\Microsoft.NET\Framework\v4.0.30319;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\;C:\Program Files\Python39\Scripts\;C:\Program Files\Python39\;C:\ProgramData\Anaconda3;C:\ProgramData\Anaconda3\Library\mingw-w64\bin;C:\ProgramData\Anaconda3\Library\usr\bin;C:\ProgramData\Anaconda3\Library\bin;C:\ProgramData\Anaconda3\Scripts;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Program Files\CMake\bin;C;C:\Program Files\Graphviz\bin;C:\Users\mattg\AppData\Local\Microsoft\WindowsApps;;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja;C:\Program Files\doxygen\bin;C:\Program Files\GraphViz\bin